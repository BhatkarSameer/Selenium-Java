//GitHub Forking (Copying a public Remote_Repo to Local and user's Remote_Repo)
	//Locate public web repo OR parent_fork_repo on GitHub
	
	//Fork the parent_fork_repo (User can see one repo added to his profile)
	
	//Cloning the fork to local space i.e outside existing repo folders to avoid overlap \ conflicts
	cd .. (moves out of existing repo and moves to Home directory)
	
	//ensure you cannot see <local_repo> name in CMD
	pwd (verifies you are not in any local_repo)
	
	git clone <fork_repo_path>
	
	git cd <fork_repo_name>

//GitBash Start (ensure you are in local_fork_repo)

	//Add Readme \ gitIgnore if required
	<editor_alias> README.md
	
	//Follow gitSetup.txt for pre-requisites and shortcut commands
	
	//Branching in the fork_repo (Create branch to mark Blank repo as Init stage repo)
	git checkout -b <branch_name>
	
	//View branch
	git branch (displays branches in current working_fork_repo)
				-a (displays all branches in local_fork_repo)
				
	//Commit changes to local_fork_repo
	git commit -am "Commit message"
	
	//Creating Tags to assign the Initial commit in local_fork_repo
	git tag -a <tag_name> -m "Message for the tag details" <commit_entry>

	//Check remote_fork_repo is connected
	git remote -v
	
	//Push changes to remote_fork_repo
	//Make sure all commits are cleared locally and remotely
	git push origin <tag_name>
	
	//Verify remote_fork_repo has all the additions done in local_fork_repo
	
	//Pushing changes this way will create 1 pull request for two repos
	//On gitHub user can see that the pull request in the remote_fork_repo is dispaying 2 notifications of pull
	
	//The pull request marks the commit for both the remote_fork_repo and parent_fork_repo
	
//Keeping parent_fork_repo and remote_fork_repo in Sync
	//Star the contributing repositories linked to remote_fork_repo
	
	//Navigate to master branch for local_fork_repo
	git checkout <local_fork_repo_branch_master>
	
	//List out all remote repositories connected to the local_fork_repo_branch_master
	git remote -v
	
	//Add the parent_fork_repo to the remote repo list for local_fork_repo_branch_master
	git remote add <parent_fork_repo_upstream_name> <parent_fork_repo_upstream_url> 
	
	//Fetch updates from parent_fork_repo directly to local_fork_repo_branch_master
	git pull <parent_fork_repo_upstream_name> <local_fork_repo_branch_master>
	
	//Push local_fork_repo_branch_master to remote_fork_repo

	//When there is a branch conflicts
	git branch -a (lists all existing branches including local and remote for the working_fork_repo)
	
	//Delete branch
	git branch -d <branch_name>
	
	//If branch_name is displayed in local_fork_repo but not in remote_fork_repo
	git fetch -p (syncs any deletes listed in remote_fork_repo to local_fork_repo)
	
Benefits ::
	1. The user accepting the pull to parent_fork_repo needs write access but the user comitting to it doesnt.
	
	2. The parent_fork_repo owner can review the pull request from remote_fork_repo before merging to parent_fork_repo
	
	3. Reverting a pull request is also an option
	
	4. Everytime the parent_fork_repo and remote_fork_repo are in sync, the branches created during the pull can be deleted to avoid redundant code