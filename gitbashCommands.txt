//Git help
	git help log

//Create new repo in Project folder
	git init "file_name" \ . (. symbolises current folder)

//Git state working >> staging (init commit) >> local repo (post commit) >> remote (post push)
	git status

//Logging records of Commits
	git log (shows all logs)
		--oneline (displays logs one line per commit)
		--graph (same as git log just formatted well)
		--decorate (displays branchwise commits and history)
		--all (history for all branches in repo)

	//Shows latest commit logs in p4merge tool (press q to exit when bash shows ":")
	git show
	
	//Reflog shows commits with comments \ actions performed
	git reflog

//commit related commands

	//Creates files in response in the local master repo
	npp readMe.md

	//Add all edited files to commit queue
	git add file_name.ext / --all

	//To sync deletion of one file from working area with file status in repo
	git add -u (updates status for file_name in repo)

	//Add all modifications including delete rename create
	git add -A

	//Commit 
	git commit _blank_ (opens the default editor to enter comments)
				-m "Commit Message"
				-a (adds edited file to commit)
				-am (adds edited file to commit with specific Commit message)

	//Remove select files from staging area
	git rm --cached file_name

	//Remove edited files from staging area
	git reset HEAD file_name

	//Remove File folder
	rm -rf folder_name

	//Revert changes to edited file to last version in commit history
	git checkout -- file_name

//Git Aliasing
	//Lists all assigned alias on User global level
	git config --global --list

	//Aliasing below command to a shortcut
	git log --oneline --graph --decorate --all

	//Assigns <alias name> to the specified git command in quotes
	git config --global alias.<alias name> "log --oneline --graph --decorate --all"

	//Run alias
	git <alias name>
					 -- file_name (displays git log for specified files)
					 
//File operations
	//Renaming file (can change set extentions to allowed extentions <.txt to .md> using same command)
	git mv <from_file_name.ext> <to_file_name.ext>

//Git Ignore
	*.ext (to ignore specific ext files)
	/<folder_name>/* (to ignore branch folder)
	/<folder_name>/** (to ignore entire directory)

//Git Commit compare
	//Get diff from <commit_entry> and working directory
	git diff
	
	//Get diff between <commit_entry> and last made commit
	git diff <commit_entry> HEAD
	
	//Get diff between latest commits on branches
	git diff <branch_name> master \ <branch_name>
	
	//Opens difftool and displays differences in Working and Last commit
	git difftool
	
	 //Opens difftool and displays diff between <commit_entry> and last made commit
	git difftool <commit_entry> HEAD

	//Get difftool to compare between latest commits on branches
	git difftool <branch_name> master \ <branch_name>
	
//Git Branches
	//List all branches
	git branch -a
	
	//Create and Switch to <branch_name>
	git checkout -b <branch_name>
	
	//Delete branch
	git branch -d <branch_name>

//Merging
	//Merge branches
	git merge <branch_name> (execute this from the branch you want to merge <branch_name> with)
	
//Conflicts
	//Display differences in file between branches
	cat <file_name.ext>
	
	//Mergetool to manually edit the conflicted file
	git mergetool
	
//Git Tags to set additional info
	//Creates a tag <tag_name>
	git tag <tag_name> (light-weight\no info tag)
	
	//Creates an annotated \ informational <tag_name>
	git tag -a <tag_name> -m "Commit message to provide info to the tag"
	
	//Delete tag
	git tag -d <tag_name>

	//List all tags
	git tag --list
	
	//Easier way to list out detailed history per commit
	git show <tag_name> (Lists out all commits made using the particular tag and the details comitted)
	
	//To create Simple tag at the current HEAD position in specified branch
	git tag <tag_name> <local_repo>
	
	//To create Release/ Annotated tags
	git tag -a <tag_name> -m "Message for the tag details" <commit_entry>
	
	//Pushing local tag_name to Github
	//Make sure all commits are cleared locally and remotely
	git push origin <tag_name>
	
	//Pushing all locally created tags to Github
	git push --tags
	
	//Deleting tags
	//Deleting tags in local_repo
	git tag -d <tag_name>
	
	//Deleting tags remote_repo
	git push origin :<tag_name>
	
//Comitting to a specific tag_name
	//
	
//Git Stashing
	//Save working directory in current state and update gitIgnore to exclude merge files
	git stash
	
	//Stash list to display what was stashed and when
	git stash list
	
	//When trying to apply the stashed files to branch folders
	git stash pop (will apply the latest created stash to the current working directory)
	
//Travelling between commits //Very risky
	//Commit Soft rollback / changes the location of the head to <commit_entry> no changes to commits
	git reset <commit_entry> --soft
	
	//Commit mixed rollback / removes all commits prior to <commit_entry> in to Working area
	git reset <commit_entry> --mixed

	//Commit hard rollback / removes all commits prior to <commit_entry> from all environments
	git reset <commit_entry> --hard
	
	//Using reset and reflog User can move through any action performed
	git reset --hard <commit_entry>	