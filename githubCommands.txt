//Github Remote Setup
	//To view remote repo connections
	git remote -v
	
	//Add remote repo
	git remote add <remote_repo_name> <remote_repo_url> (#1 remote repo name is set to "origin" by default)
	
//Git Push
	//Command with "--tags" syncs local_repo tags with remote_repo (tags are important to mark code releases)
	git push -u <remote_repo_name> <master> --tags
	
//Communicating with SSH
	//Create a .ssh directory in Home (Command prompt as Admin)
	mkdir .ssh
	
	//Navigate into .ssh using "cd .ssh"
	//Generating a key
	ssh-keygen -t rsa -C "<user_email_address>
	(edit prompted values if necessary only)
	
	//Edit pub file
	npp id_rsa.pub (Copy and register the contents in remote_repo SSH keys)
	
	//Verifying SSH connectivity
	//(Command prompt as Admin and inside .ssh folder)
	ssh -T git@github.com (Enter and type Yes when prompted)
	
//Cloning a repo from remote to local folder <folder_name> (outside existing local_repo)
	git clone <ssh path> \ <https path> <folder_name>
	
//Removing folder recursively
	rm -rf <folder_name>
	
//Copy files from any folder to local_repo
	1. Create remote_repo in github
	2. Run below command in new folder intended to become a local_repo
	git clone <ssh path> \ <https path> <folder_name>
	3. Initialise the <folder_name> as git local_repo
	4. Navigate inside local_repo bash
	5. Run below command to copy contents of any other file into the newly created local_repo
	cp -R ~/path_to_copy_from/* . (run this on bash inside local_repo)
	
//Delete remote branch from Bash
	git push origin :<remote_repo_name>

//Rebase is done when remote_repo is behind local_repo commits and User does not want to merge
	git push --rebase
	

